/*
 * This file is generated by jOOQ.
*/
package fr.caddarik.theblog.dao.jooq.tables;


import fr.caddarik.theblog.dao.jooq.DefaultSchema;
import fr.caddarik.theblog.dao.jooq.Keys;
import fr.caddarik.theblog.dao.jooq.tables.records.PostRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostTable extends TableImpl<PostRecord> {

    private static final long serialVersionUID = 1199634434;

    /**
     * The reference instance of <code>post</code>
     */
    public static final PostTable POST = new PostTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostRecord> getRecordType() {
        return PostRecord.class;
    }

    /**
     * The column <code>post.id</code>.
     */
    public final TableField<PostRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>post.user_id</code>.
     */
    public final TableField<PostRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>post.title</code>.
     */
    public final TableField<PostRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>post.body</code>.
     */
    public final TableField<PostRecord, String> BODY = createField("body", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>post.date</code>.
     */
    public final TableField<PostRecord, String> DATE = createField("date", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>post</code> table reference
     */
    public PostTable() {
        this(DSL.name("post"), null);
    }

    /**
     * Create an aliased <code>post</code> table reference
     */
    public PostTable(String alias) {
        this(DSL.name(alias), POST);
    }

    /**
     * Create an aliased <code>post</code> table reference
     */
    public PostTable(Name alias) {
        this(alias, POST);
    }

    private PostTable(Name alias, Table<PostRecord> aliased) {
        this(alias, aliased, null);
    }

    private PostTable(Name alias, Table<PostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PostRecord> getPrimaryKey() {
        return Keys.PK_POST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PostRecord>> getKeys() {
        return Arrays.<UniqueKey<PostRecord>>asList(Keys.PK_POST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PostRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PostRecord, ?>>asList(Keys.FK_POST_USER_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostTable as(String alias) {
        return new PostTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostTable as(Name alias) {
        return new PostTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PostTable rename(String name) {
        return new PostTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostTable rename(Name name) {
        return new PostTable(name, null);
    }
}
